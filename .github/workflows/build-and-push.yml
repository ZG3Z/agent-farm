name: Build and Push Images

on:
  workflow_dispatch:

env:
  REGISTRY_LOCATION: europe-west1
  REGISTRY_NAME: agents
  ENVIRONMENT: prd

jobs:
  validation:
    name: Code Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install validation dependencies
      run: pip install pyyaml
    
    - name: Validate YAML files
      run: |
        python -c "import yaml; yaml.safe_load(open('agents_config.yaml'))"
        python -c "import yaml; yaml.safe_load(open('docker-compose.yml'))"

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: validation
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Create environment file
      run: |
        cat > .env << EOF
        GOOGLE_API_KEY=${{ secrets.GOOGLE_API_KEY }}
        OPENWEATHER_API_KEY=${{ secrets.OPENWEATHER_API_KEY }}
        EOF
    
    - name: Build containers
      run: docker-compose build
    
    - name: Start services
      run: docker-compose up -d
    
    - name: Wait for services
      run: |
        sleep 30
        
        grep -E "^\s+port:" agents_config.yaml | awk '{print $2}' > ports.txt
        
        echo "Checking health endpoints..."
        while read PORT; do
          echo "Checking port $PORT..."
          for i in {1..10}; do
            if curl -f http://localhost:$PORT/health 2>/dev/null; then
              echo "Port $PORT ready"
              break
            fi
            if [ $i -eq 10 ]; then
              echo "Port $PORT failed to start"
              docker-compose logs
              exit 1
            fi
            sleep 5
          done
        done < ports.txt
        
        echo "All agents ready"
    
    - name: Install test dependencies
      run: pip install pytest requests pyyaml
    
    - name: Run unit tests
      run: pytest tests/unit/ -v --tb=short --maxfail=3
    
    - name: Run integration tests
      run: pytest tests/integration/ -v --tb=short --maxfail=3
    
    - name: Stop services
      if: always()
      run: docker-compose down -v
    
    - name: Test summary
      if: always()
      run: |
        echo "### Test Results" >> $GITHUB_STEP_SUMMARY
        echo "Status: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY

  build-push:
    name: Build and Push Images
    runs-on: ubuntu-latest
    needs: test
    
    permissions:
      contents: read
      id-token: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Discover agents
      id: discover
      run: |
        AGENTS_DIR="agents"
        agents=()
        
        for dir in "$AGENTS_DIR"/*/ ; do
            if [ -f "${dir}Dockerfile" ]; then
                agent_name=$(basename "$dir")
                agents+=("\"$agent_name\"")
            fi
        done
        
        agents_json=$(IFS=,; echo "${agents[*]}")
        matrix_json="{\"agent\": [$agents_json]}"
        
        echo "matrix=$matrix_json" >> $GITHUB_OUTPUT
        echo "Discovered agents: $matrix_json"
    
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
        service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}
    
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
    
    - name: Configure Docker
      run: gcloud auth configure-docker ${{ env.REGISTRY_LOCATION }}-docker.pkg.dev
    
    - name: Set image tags
      id: tags
      run: |
        SHORT_SHA=$(git rev-parse --short HEAD)
        TIMESTAMP=$(date +%Y%m%d-%H%M%S)
        echo "short_sha=${SHORT_SHA}" >> $GITHUB_OUTPUT
        echo "timestamp=${TIMESTAMP}" >> $GITHUB_OUTPUT
    
    - name: Build and push all agents
      run: |
        AGENTS=$(echo '${{ steps.discover.outputs.matrix }}' | jq -r '.agent[]')
        
        for AGENT in $AGENTS; do
          echo "Building $AGENT..."
          
          IMAGE_BASE="${{ env.REGISTRY_LOCATION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ env.REGISTRY_NAME }}/$AGENT"
          
          docker build \
            -t ${IMAGE_BASE}:${{ steps.tags.outputs.short_sha }} \
            -t ${IMAGE_BASE}:${{ steps.tags.outputs.timestamp }} \
            -t ${IMAGE_BASE}:${{ env.ENVIRONMENT }} \
            -t ${IMAGE_BASE}:latest \
            -f agents/$AGENT/Dockerfile \
            .
          
          echo "Pushing $AGENT..."
          docker push ${IMAGE_BASE}:${{ steps.tags.outputs.short_sha }}
          docker push ${IMAGE_BASE}:${{ steps.tags.outputs.timestamp }}
          docker push ${IMAGE_BASE}:${{ env.ENVIRONMENT }}
          docker push ${IMAGE_BASE}:latest
          
          echo "Completed $AGENT"
        done
    
    - name: Build summary
      run: |
        echo "### Build Complete" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Environment: ${{ env.ENVIRONMENT }}" >> $GITHUB_STEP_SUMMARY
        echo "SHA: ${{ steps.tags.outputs.short_sha }}" >> $GITHUB_STEP_SUMMARY
        echo "Timestamp: ${{ steps.tags.outputs.timestamp }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "#### Built agents:" >> $GITHUB_STEP_SUMMARY
        echo '${{ steps.discover.outputs.matrix }}' | jq -r '.agent[]' | while read agent; do
          echo "- $agent" >> $GITHUB_STEP_SUMMARY
        done

  summary:
    name: Pipeline Summary
    runs-on: ubuntu-latest
    needs: [validation, test, build-push]
    if: always()
    
    steps:
    - name: Generate summary
      run: |
        echo "## Pipeline Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Stage | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Validation | ${{ needs.validation.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Tests | ${{ needs.test.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Build & Push | ${{ needs.build-push.result }} |" >> $GITHUB_STEP_SUMMARY