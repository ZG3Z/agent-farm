name: Build and Push Images

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - 'agents/**'
      - 'shared/**'
      - 'agents_config.yaml'
      - '.github/workflows/build-and-push.yml'

env:
  REGISTRY_LOCATION: europe-west1
  REGISTRY_NAME: agents
  ENVIRONMENT: prd

jobs:
  validation:
    name: Code Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install validation dependencies
      run: pip install pyyaml black
    
    - name: Check code formatting
      run: black --check agents/ shared/
    
    - name: Validate YAML files
      run: |
        python -c "import yaml; yaml.safe_load(open('agents_config.yaml'))"
        python -c "import yaml; yaml.safe_load(open('docker-compose.yml'))"

  detect-changes:
    name: Detect Changed Agents
    runs-on: ubuntu-latest
    needs: validation
    outputs:
      changed_agents: ${{ steps.changes.outputs.changed_agents }}
      rebuild_all: ${{ steps.changes.outputs.rebuild_all }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Discover and detect changes
      id: changes
      run: |
        # Discover all agents
        AGENTS_DIR="agents"
        all_agents=()
        
        for dir in "$AGENTS_DIR"/*/ ; do
            if [ -f "${dir}Dockerfile" ]; then
                agent_name=$(basename "$dir")
                all_agents+=("\"$agent_name\"")
            fi
        done
        
        # Check if this is first build or manual trigger
        if ! git rev-parse HEAD~1 >/dev/null 2>&1 || [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "First build or manual trigger - building all agents"
          all_agents_json=$(IFS=,; echo "${all_agents[*]}")
          echo "changed_agents=[$all_agents_json]" >> $GITHUB_OUTPUT
          echo "rebuild_all=true" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        # Get changed files
        CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
        echo "Changed files:"
        echo "$CHANGED_FILES"
        
        # Check if shared/ changed - rebuild all
        if echo "$CHANGED_FILES" | grep -q '^shared/'; then
          echo "shared/ changed - rebuilding all agents"
          all_agents_json=$(IFS=,; echo "${all_agents[*]}")
          echo "changed_agents=[$all_agents_json]" >> $GITHUB_OUTPUT
          echo "rebuild_all=true" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        # Collect changed agents
        changed_agents=()
        
        # Check agent folders
        CHANGED_AGENT_DIRS=$(echo "$CHANGED_FILES" | grep '^agents/' | cut -d'/' -f2 | sort -u)
        
        for dir in $CHANGED_AGENT_DIRS; do
          if [ -d "agents/$dir" ] && [ -f "agents/$dir/Dockerfile" ]; then
            changed_agents+=("\"$dir\"")
            echo "Agent changed: $dir"
          fi
        done
        
        # Check if agents_config.yaml changed and which agents are affected
        if echo "$CHANGED_FILES" | grep -q '^agents_config.yaml$'; then
          echo "agents_config.yaml changed - detecting affected agents"
          
          # Get changed lines in config file
          CHANGED_AGENT_NAMES=$(git diff HEAD~1 HEAD agents_config.yaml | grep -E '^\+\s+\w+-\w+:' | sed 's/^\+\s*//' | sed 's/:.*//' || true)
          
          if [ -n "$CHANGED_AGENT_NAMES" ]; then
            echo "Affected agents in config:"
            echo "$CHANGED_AGENT_NAMES"
            
            for agent_name in $CHANGED_AGENT_NAMES; do
              # Check if this agent exists and isn't already in changed list
              if [ -d "agents/$agent_name" ] && [ -f "agents/$agent_name/Dockerfile" ]; then
                if [[ ! " ${changed_agents[@]} " =~ " \"$agent_name\" " ]]; then
                  changed_agents+=("\"$agent_name\"")
                  echo "Adding agent from config: $agent_name"
                fi
              fi
            done
          else
            # If we can't detect specific changes in config, rebuild all
            echo "Cannot detect specific config changes - rebuilding all"
            all_agents_json=$(IFS=,; echo "${all_agents[*]}")
            echo "changed_agents=[$all_agents_json]" >> $GITHUB_OUTPUT
            echo "rebuild_all=true" >> $GITHUB_OUTPUT
            exit 0
          fi
        fi
        
        # Output results
        if [ ${#changed_agents[@]} -eq 0 ]; then
          echo "No agents changed - nothing to build"
          echo "changed_agents=[]" >> $GITHUB_OUTPUT
          echo "rebuild_all=false" >> $GITHUB_OUTPUT
        else
          agents_json=$(IFS=,; echo "${changed_agents[*]}")
          echo "changed_agents=[$agents_json]" >> $GITHUB_OUTPUT
          echo "rebuild_all=false" >> $GITHUB_OUTPUT
          echo "Changed agents: [$agents_json]"
        fi

  build-push:
    name: Build and Push Images
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.changed_agents != '[]'
    
    permissions:
      contents: read
      id-token: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Debug output
      run: |
        echo "Changed agents: ${{ needs.detect-changes.outputs.changed_agents }}"
        echo "Rebuild all: ${{ needs.detect-changes.outputs.rebuild_all }}"
    
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
    
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      id: auth
      with:
        workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
        service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}
    
    - name: Set project
      run: gcloud config set project ${{ secrets.GCP_PROJECT_ID }}
    
    - name: Configure Docker
      run: gcloud auth configure-docker ${{ env.REGISTRY_LOCATION }}-docker.pkg.dev
    
    - name: Set image tags
      id: tags
      run: |
        SHORT_SHA=$(git rev-parse --short HEAD)
        TIMESTAMP=$(date +%Y%m%d-%H%M%S)
        echo "short_sha=${SHORT_SHA}" >> $GITHUB_OUTPUT
        echo "timestamp=${TIMESTAMP}" >> $GITHUB_OUTPUT
    
    - name: Build and push agents
      run: |
        AGENTS=$(echo '${{ needs.detect-changes.outputs.changed_agents }}' | jq -r '.[]')
        
        if [ -z "$AGENTS" ]; then
          echo "No agents to build - skipping"
          exit 0
        fi
        
        echo "Building agents: $AGENTS"
        
        for AGENT in $AGENTS; do
          echo "----------------------------------------"
          echo "Building $AGENT..."
          echo "----------------------------------------"
          
          IMAGE_BASE="${{ env.REGISTRY_LOCATION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ env.REGISTRY_NAME }}/$AGENT"
          
          # Build
          docker build \
            -t ${IMAGE_BASE}:${{ steps.tags.outputs.short_sha }} \
            -t ${IMAGE_BASE}:${{ steps.tags.outputs.timestamp }} \
            -t ${IMAGE_BASE}:${{ env.ENVIRONMENT }} \
            -t ${IMAGE_BASE}:latest \
            -f agents/$AGENT/Dockerfile \
            .
          
          # Push all tags
          echo "Pushing $AGENT images..."
          docker push ${IMAGE_BASE}:${{ steps.tags.outputs.short_sha }}
          docker push ${IMAGE_BASE}:${{ steps.tags.outputs.timestamp }}
          docker push ${IMAGE_BASE}:${{ env.ENVIRONMENT }}
          docker push ${IMAGE_BASE}:latest
          
          echo "✓ Completed $AGENT"
        done
        
        echo "----------------------------------------"
        echo "All builds completed successfully"
        echo "----------------------------------------"
    
    - name: Build summary
      if: always()
      run: |
        AGENTS=$(echo '${{ needs.detect-changes.outputs.changed_agents }}' | jq -r '.[]')
        REBUILD_ALL="${{ needs.detect-changes.outputs.rebuild_all }}"
        
        echo "### Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Environment:** ${{ env.ENVIRONMENT }}" >> $GITHUB_STEP_SUMMARY
        echo "**Commit:** ${{ steps.tags.outputs.short_sha }}" >> $GITHUB_STEP_SUMMARY
        echo "**Timestamp:** ${{ steps.tags.outputs.timestamp }}" >> $GITHUB_STEP_SUMMARY
        echo "**Rebuild all:** $REBUILD_ALL" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -z "$AGENTS" ]; then
          echo "**Status:** No agents changed - nothing built" >> $GITHUB_STEP_SUMMARY
        else
          echo "#### Built agents:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          for agent in $AGENTS; do
            echo "- ✓ $agent" >> $GITHUB_STEP_SUMMARY
          done
        fi

  summary:
    name: Pipeline Summary
    runs-on: ubuntu-latest
    needs: [validation, detect-changes, build-push]
    if: always()
    
    steps:
    - name: Generate summary
      run: |
        echo "## Pipeline Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Stage | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Validation | ${{ needs.validation.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Detect Changes | ${{ needs.detect-changes.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Build & Push | ${{ needs.build-push.result }} |" >> $GITHUB_STEP_SUMMARY