name: Build and Push Images

on:
  workflow_dispatch:

env:
  REGISTRY_LOCATION: europe-west1
  REGISTRY_NAME: agents
  ENVIRONMENT: prd

jobs:
  validation:
    name: Code Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install validation tools
      run: |
        pip install flake8 black pylint
    
    - name: Check code formatting
      run: |
        black --check agents/ shared/ tests/
    
    - name: Run linting
      run: |
        flake8 agents/ shared/ tests/ --max-line-length=120 --ignore=E501,W503
    
    - name: Validate YAML files
      run: |
        python -c "import yaml; yaml.safe_load(open('agents_config.yaml'))"
        python -c "import yaml; yaml.safe_load(open('docker-compose.yml'))"

  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    needs: validation
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        pip install pylint radon
    
    - name: Run quality checks
      run: |
        pylint agents/ shared/ --fail-under=7.0 --disable=C0114,C0115,C0116
    
    - name: Check code complexity
      run: |
        radon cc agents/ shared/ -a -nb

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: quality
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Create environment file
      run: |
        cat > .env << EOF
        GOOGLE_API_KEY=${{ secrets.GOOGLE_API_KEY }}
        OPENWEATHER_API_KEY=${{ secrets.OPENWEATHER_API_KEY }}
        EOF
    
    - name: Build containers
      run: docker-compose build
    
    - name: Start services
      run: docker-compose up -d
    
    - name: Wait for services
      run: |
        sleep 30
        for i in {1..10}; do
          curl -f http://localhost:8080/health && \
          curl -f http://localhost:8081/health && \
          curl -f http://localhost:8082/health && \
          curl -f http://localhost:8083/health && break
          sleep 5
        done
    
    - name: Install test dependencies
      run: pip install pytest requests pyyaml
    
    - name: Run unit tests
      run: pytest tests/unit/ -v --tb=short --maxfail=3
    
    - name: Run integration tests
      run: pytest tests/integration/ -v --tb=short --maxfail=3
    
    - name: Stop services
      if: always()
      run: docker-compose down -v
    
    - name: Test summary
      if: always()
      run: |
        echo "### Test Results" >> $GITHUB_STEP_SUMMARY
        echo "Unit tests: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
        echo "Integration tests: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY

  build-push:
    name: Build and Push Images
    runs-on: ubuntu-latest
    needs: test
    
    permissions:
      contents: read
      id-token: write
    
    outputs:
      agents-matrix: ${{ steps.discover.outputs.matrix }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Discover agents
      id: discover
      run: |
        chmod +x scripts/discover_agents.sh
        MATRIX=$(./scripts/discover_agents.sh)
        echo "matrix=$MATRIX" >> $GITHUB_OUTPUT
    
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
        service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}
    
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
    
    - name: Configure Docker
      run: gcloud auth configure-docker ${{ env.REGISTRY_LOCATION }}-docker.pkg.dev
    
    - name: Set image tags
      id: tags
      run: |
        SHORT_SHA=$(git rev-parse --short HEAD)
        TIMESTAMP=$(date +%Y%m%d-%H%M%S)
        echo "short_sha=${SHORT_SHA}" >> $GITHUB_OUTPUT
        echo "timestamp=${TIMESTAMP}" >> $GITHUB_OUTPUT
    
    - name: Build and push all agents
      run: |
        AGENTS=$(echo '${{ steps.discover.outputs.matrix }}' | jq -r '.agent[]')
        
        for AGENT in $AGENTS; do
          echo "Building $AGENT..."
          
          IMAGE_BASE="${{ env.REGISTRY_LOCATION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ env.REGISTRY_NAME }}/$AGENT"
          
          docker build \
            -t ${IMAGE_BASE}:${{ steps.tags.outputs.short_sha }} \
            -t ${IMAGE_BASE}:${{ steps.tags.outputs.timestamp }} \
            -t ${IMAGE_BASE}:${{ inputs.environment }} \
            -t ${IMAGE_BASE}:latest \
            -f agents/$AGENT/Dockerfile \
            .
          
          echo "Pushing $AGENT..."
          docker push ${IMAGE_BASE}:${{ steps.tags.outputs.short_sha }}
          docker push ${IMAGE_BASE}:${{ steps.tags.outputs.timestamp }}
          docker push ${IMAGE_BASE}:${{ inputs.environment }}
          docker push ${IMAGE_BASE}:latest
          
          echo "Completed $AGENT"
        done
    
    - name: Build summary
      run: |
        echo "### Build Complete" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Environment: ${{ inputs.environment }}" >> $GITHUB_STEP_SUMMARY
        echo "SHA: ${{ steps.tags.outputs.short_sha }}" >> $GITHUB_STEP_SUMMARY
        echo "Timestamp: ${{ steps.tags.outputs.timestamp }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "#### Built agents:" >> $GITHUB_STEP_SUMMARY
        echo '${{ steps.discover.outputs.matrix }}' | jq -r '.agent[]' | while read agent; do
          echo "- $agent" >> $GITHUB_STEP_SUMMARY
        done

  summary:
    name: Pipeline Summary
    runs-on: ubuntu-latest
    needs: [validation, quality, test, build-push]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Generate summary
      run: |
        echo "## Pipeline Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Stage | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Validation | ${{ needs.validation.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Quality | ${{ needs.quality.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Tests | ${{ needs.test.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Build & Push | ${{ needs.build-push.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Environment: ${{ inputs.environment }}" >> $GITHUB_STEP_SUMMARY